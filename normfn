#!/usr/bin/env python3

import argparse
import calendar
from contextlib import suppress
from datetime import datetime
import logging
import logging.handlers
import os
import os.path
import re
import shlex
import shutil
import sys
import textwrap
import traceback

assert sys.version_info >= (3, 8)

BASENAME_EXCLUDE_PATTERNS = frozenset([r"\..*", "Icon\r", r".*\.lo?ck"])

if os.sep == "\\":
    EFFECTIVE_SEP = r"\\"
else:
    EFFECTIVE_SEP = os.sep

FULLNAME_EXCLUDE_PATTERNS = frozenset(
    [
        r".*\.git" + EFFECTIVE_SEP + r".*",
        r".*\.svn" + EFFECTIVE_SEP + r".*",
        r".*\.hg" + EFFECTIVE_SEP + r".*",
        r".*\.bzr" + EFFECTIVE_SEP + r".*",
    ]
)

YEAR = ""


def main(argv, syserr_handler):
    logger = logging.getLogger("normfn")

    class ArgumentParser(argparse.ArgumentParser):
        def error(self, message):
            parser.print_help()
            raise FatalException(message)

    parser = ArgumentParser(
        description="Normalizes filenames by prefixing a date to them. "
        "See https://github.com/andrewferrier/normfn for more information.",
        add_help=False,
    )

    parser.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=0,
        help="Add debugging output. "
        "Using this twice makes it doubly verbose.",
    )

    parser.add_argument(
        "-h",
        "--help",
        action="store_true",
        help="Show help information for normfn.",
    )

    parser.add_argument(
        "-n",
        "--dry-run",
        action="store_true",
        dest="dry_run",
        help="Don't actually make any changes, just show them. Forces "
        "a single level of verbosity (-v).",
    )

    parser.add_argument(
        "-i",
        "--interactive",
        action="store_true",
        dest="interactive",
        help="Ask about each change before it is done.",
    )

    parser.add_argument(
        "-a",
        "--all",
        action="store_true",
        dest="all",
        help="Affect all files, including those in default exclude lists.",
    )

    parser.add_argument(
        "-f",
        "--force",
        action="store_true",
        dest="force",
        help="Overwrite target files if they already "
        "exist (USE WITH CAUTION, consider using --dry-run "
        "first).",
    )

    parser.add_argument(
        "-t",
        "--add-time",
        action="store_true",
        dest="add_time",
        help="If a time is not found in the filename, add one.",
    )

    parser.add_argument(
        "-d",
        "--discard-existing-name",
        action="store_true",
        dest="discard_existing_name",
        help="Discard existing name and just use the date/time prefix.",
    )

    parser.add_argument(
        "-r",
        "--recursive",
        action="store_true",
        dest="recursive",
        default=False,
        help="Recurse into directories specified on the command line. The default is "
        "not to do this, and simply look at the name of the directory itself.",
    )

    parser.add_argument(
        "--max-years-ahead",
        type=int,
        dest="max_years_ahead",
        default=5,
        help="Consider years further ahead from now than this not "
        "to be valid years. Defaults to 5.",
    )

    parser.add_argument(
        "--max-years-behind",
        type=int,
        dest="max_years_behind",
        default=30,
        help="Consider years further behind from now than this not "
        "to be valid years. Defaults to 30.",
    )

    log_option = parser.add_mutually_exclusive_group()

    log_option.add_argument(
        "--undo-log-file",
        type=str,
        dest="undo_log_file",
        help="The name of the shell script to log "
        "'undo commands' for normfn; see the "
        "instructions in the file to use. "
        f"Defaults to {get_default_log_file()}",
    )

    log_option.add_argument(
        "--no-undo-log-file",
        dest="no_undo_log_file",
        action="store_true",
        help="Inverse of --undo-log-file; don't store undo commands.",
    )

    time_option = parser.add_mutually_exclusive_group()

    time_option.add_argument(
        "--now",
        action="store_const",
        dest="time_option",
        const="now",
        help="Use date and time now as the default "
        "file prefix for filenames without them.",
    )

    time_option.add_argument(
        "--latest",
        "--newest",
        action="store_const",
        dest="time_option",
        const="latest",
        help="Use the latest of ctime and mtime "
        "to define a file prefix for files without them. "
        "Note: ctime is *not* "
        "file creation on Linux/OS X; see "
        "http://lwn.net/Articles/397442/.",
    )

    time_option.add_argument(
        "--earliest",
        "--oldest",
        action="store_const",
        dest="time_option",
        const="earliest",
        help="Use earliest of ctime and mtime "
        "to define a file prefix for files without them. "
        "This is the default.",
    )

    parser.set_defaults(
        time_option="earliest", undo_log_file=get_default_log_file()
    )

    class FilenamesAction(argparse.Action):
        # pylint: disable=too-few-public-methods

        def __call__(self, parser, args, values, _):
            args.filenames = values
            if (not args.help) and len(values) < 1:
                parser.error("You must specify some file or directory names.")

    parser.add_argument(
        "filenames",
        metavar="filename",
        nargs="*",
        help="Filenames",
        action=FilenamesAction,
    )

    args = parser.parse_args(argv[1:])

    if args.help:
        parser.print_help()
        return

    if args.dry_run:
        if args.verbose < 1:
            args.verbose = 1

    if syserr_handler:
        if args.verbose > 1:
            syserr_handler.setLevel(logging.DEBUG)
        elif args.verbose == 1:
            syserr_handler.setLevel(logging.INFO)
        else:
            syserr_handler.setLevel(logging.WARNING)

    logger.debug(f"Arguments are: {args}")

    if args.no_undo_log_file:
        args.undo_log_file = None

    global YEAR

    year_now = datetime.now().year
    year_list = [
        str(year)
        for year in range(
            year_now - args.max_years_behind, year_now + args.max_years_ahead
        )
    ]
    logger.debug(f"Valid years are: {year_list}")
    YEAR = r"(" + "|".join(year_list) + r")"

    with suppress(QuitException):
        for filename in args.filenames:
            filename = os.path.abspath(filename)
            if not os.path.exists(filename):
                raise FatalException(
                    filename + " specified on the command line does not exist."
                )

            if os.path.isdir(filename) and args.recursive:
                new_filename = process_filename(filename, args)
                assert new_filename is not None
                walk_tree(new_filename, args)
            else:
                process_filename(filename, args)


def get_default_log_file():
    home = os.path.expanduser("~")
    xdg_state_home = os.environ.get("XDG_STATE_HOME") or os.path.join(
        home, ".local", "state"
    )
    return os.path.join(xdg_state_home, "normfn-undo.log.sh")


def walk_tree(dirname: str, args):
    logger = logging.getLogger("normfn")

    assert os.path.isdir(dirname)
    logger.debug("Walking directory tree " + dirname)
    dirlist = sorted(os.listdir(dirname))

    for entry in dirlist:
        entry = os.path.join(dirname, entry)

        entry = process_filename(entry, args)
        assert entry is not None
        if os.path.isdir(entry):
            walk_tree(entry, args)


def datetime_prefix(args, non_extension: str, filename: str):
    logger = logging.getLogger("normfn")

    def first_not_none(list):
        for item in list:
            if item is not None:
                return item

        return None

    def replacement(matchobj):
        logger.debug(f"replacement() called, matchobj = {matchobj}")

        year = str(
            first_not_none(
                [
                    matchobj.group("year1"),
                    matchobj.group("year2"),
                    matchobj.group("year3"),
                ]
            )
        )
        month = str(
            first_not_none(
                [
                    matchobj.group("month1"),
                    matchobj.group("month2"),
                    matchobj.group("month3"),
                ]
            )
        )
        day = first_not_none([matchobj.group("day1"), matchobj.group("day2")])

        if not month.isdigit():
            try:
                monthDigit = list(map(str.lower, calendar.month_abbr)).index(
                    month.lower()
                )
            except ValueError:
                monthDigit = list(map(str.lower, calendar.month_name)).index(
                    month.lower()
                )

            month = str(monthDigit)

        if len(month) == 1:
            month = "0" + month

        if day is not None and len(day) == 1:
            day = "0" + day

        replaceValue = (
            year
            + "-"
            + month
            + (("-" + day) if day is not None else "")
            + (
                ("T" + matchobj.group("hour"))
                if matchobj.group("hour") is not None
                else ""
            )
            + (
                ("-" + matchobj.group("minute"))
                if matchobj.group("minute") is not None
                else ""
            )
            + (
                ("-" + matchobj.group("second"))
                if matchobj.group("second") is not None
                else ""
            )
        )

        if not args.discard_existing_name:
            replaceValue = replaceValue + (
                (
                    ("-" + matchobj.group("prefix"))
                    if matchobj.group("prefix") != ""
                    else ""
                )
                + (
                    matchobj.group("suffix")
                    if matchobj.group("suffix") != ""
                    else ""
                )
            )

        logger.debug("replacement() returned: " + replaceValue)
        return replaceValue

    MONTH_NAMES_ONLY = (
        "|".join(map(insensitiveize, calendar.month_name[1:13]))
        + "|"
        + "|".join(map(insensitiveize, calendar.month_abbr[1:13]))
    )
    MONTH = r"(0[1-9]|1[012]|[1-9](?!\d)|" + MONTH_NAMES_ONLY + ")"
    DAY = r"(0[1-9]|[12]\d|3[01]|[1-9](?!\d))"
    HOUR = r"([01]\d|2[0123])"
    MINUTE = SECOND = r"[012345]\d"

    DATE_SEPARATOR = r"[-_.\s]?"
    YMD_SEPARATOR_FIRST = r"(?P<ymdsep>" + DATE_SEPARATOR + r")"
    YMD_SEPARATOR_FOLLOWING = r"(?P=ymdsep)"
    DMY_SEPARATOR_FIRST = r"(?P<dmysep>" + DATE_SEPARATOR + r")"
    DMY_SEPARATOR_FOLLOWING = r"(?P=dmysep)"
    MY_SEPARATOR = DATE_SEPARATOR
    HMS_SEPARATOR_FIRST = r"(?P<hmssep>[-_.\s]?)"
    HMS_SEPARATOR_FOLLOWING = r"(?P=hmssep)"
    DATE_TIME_SEPARATOR = r"([-_T\s]|\sat\s|,\s)"

    REGEX = (
        r"^(?P<prefix>.*?)[-_]?" + r"(" +
        # Y-M-D style
        r"(?P<year1>"
        + YEAR
        + r")"
        + YMD_SEPARATOR_FIRST
        + r"(?P<month1>"
        + MONTH
        + r")"
        + r"("
        + YMD_SEPARATOR_FOLLOWING
        + r"(?P<day1>"
        + DAY
        + r"))?"
        + r"|"
        +
        # D-M-Y style
        r"(?P<day2>"
        + DAY
        + r")"
        + DMY_SEPARATOR_FIRST
        + r"(?P<month2>"
        + MONTH
        + r")"
        + DMY_SEPARATOR_FOLLOWING
        + r"(?P<year2>"
        + YEAR
        + r")"
        + r"|"
        +
        # M-Y style, with months in name only
        r"(?P<month3>"
        + MONTH_NAMES_ONLY
        + r")"
        + MY_SEPARATOR
        + r"(?P<year3>"
        + YEAR
        + r")"
        + r")"
        + r"("
        + DATE_TIME_SEPARATOR
        + r"(?P<hour>"
        + HOUR
        + r")"
        r"(" + HMS_SEPARATOR_FIRST + r"(?P<minute>" + MINUTE + r")"
        r"(" + HMS_SEPARATOR_FOLLOWING + r"(?P<second>" + SECOND + r"))?)?)?"
        r"(?P<suffix>.*)$"
    )

    logger.debug("Complete regex used against " + non_extension + ": " + REGEX)

    (newname, number_of_subs) = re.subn(REGEX, replacement, non_extension)

    assert number_of_subs <= 1

    if number_of_subs == 0:
        logger.debug("Didn't find date or time")

        timetouse = get_timetouse(args, filename)

        newname_with_dash_if_needed = (
            ("-" + newname) if not args.discard_existing_name else ""
        )

        if args.add_time:
            newname = (
                timetouse.strftime("%Y-%m-%dT%H-%M-%S")
                + newname_with_dash_if_needed
            )
        else:
            newname = (
                timetouse.strftime("%Y-%m-%d") + newname_with_dash_if_needed
            )

    return newname


def process_filename(filename: str, args):
    logger = logging.getLogger("normfn")

    logger.debug(f"Processing filename {filename}")
    basename = os.path.basename(filename)

    if not args.all:
        (exclude, why) = should_exclude(filename, basename)
        if exclude:
            logger.info(
                f"Skipping {filename.strip()} as it matches pattern {why}"
            )
            return filename

    (non_extension, extension) = os.path.splitext(basename)

    non_extension = datetime_prefix(args, non_extension, filename)

    newname = non_extension.strip() + extension

    original_filename = filename
    filename = os.path.join(os.path.dirname(original_filename), newname)
    logger.debug(
        f"Potential new filename for {original_filename} is {filename}"
    )

    if filename == original_filename:
        logger.debug("New filename would be identical, skipping.")
        return original_filename

    validate_move(args, original_filename, filename)

    move_it = True

    if args.interactive:
        move_it = ask_yes_no(
            f"Move {original_filename.strip()} to .../{newname} [y/n/e/q]?"
        )
        if move_it == b"e":
            new_filename = rlinput("What new filename? ", newname)
            new_filename = os.path.join(
                os.path.dirname(original_filename), new_filename
            )
            validate_move(args, original_filename, new_filename)
            filename = new_filename
        else:
            move_it = True if move_it == b"y" else False

    if move_it:
        if not args.dry_run:
            shiftfile(args, original_filename, filename)
            return filename
        else:
            logger.info(
                f"Not moving {original_filename.strip()} to {filename}; dry run."
            )
            return original_filename
    else:
        logger.info(f"Not moving {original_filename.strip()}")
        return original_filename


def should_exclude(filename, basename):
    match = False
    EXCLUDE_PATTERN = ""

    for EXCLUDE_PATTERN in BASENAME_EXCLUDE_PATTERNS:
        if re.fullmatch(EXCLUDE_PATTERN, basename):
            match = True
            break

    if not match:
        for EXCLUDE_PATTERN in FULLNAME_EXCLUDE_PATTERNS:
            if re.fullmatch(EXCLUDE_PATTERN, filename):
                match = True
                break

    return (match, EXCLUDE_PATTERN)


def get_timetouse(args, filename: str):
    ctime = datetime.fromtimestamp(os.path.getctime(filename))
    mtime = datetime.fromtimestamp(os.path.getmtime(filename))

    if args.time_option == "now":
        timetouse = datetime.now()
    elif args.time_option == "earliest":
        timetouse = min(ctime, mtime)
    else:
        timetouse = max(ctime, mtime)

    return timetouse


def validate_move(args, original_filename: str, filename: str):
    if os.path.exists(filename) and not args.force:
        raise FatalException(
            f"Want to move {original_filename.strip()} to "
            f"{filename}, but it already exists."
        )


def rlinput(prompt: str, prefill=""):
    if os.name == "nt":
        return input(prompt)
    else:
        import readline

        readline.set_startup_hook(lambda: readline.insert_text(prefill))
        try:
            return input(prompt)
        finally:
            readline.set_startup_hook()


def shiftfile(args, source: str, target: str):
    logger = logging.getLogger("normfn")

    source = os.path.abspath(source)
    target = os.path.abspath(target)

    dt_now = datetime.now().strftime("%Y-%m-%dT%H-%M-%S")

    try:
        shutil.move(source, target)
    except PermissionError as permission_error:
        filename = permission_error.filename
        if filename == source:
            raise FatalException(f"Permission denied on source: {filename}")
        elif filename == target:
            raise FatalException(f"Permission denied on target: {filename}")
        else:
            raise

    if args.undo_log_file:
        check_undo_log_file_header(args)
        with open(args.undo_log_file, "a", encoding="utf-8") as log_file:
            log_file.write(f"# {dt_now}: moving {source} to {target}\n")
            log_file.write(f"mv {shlex.quote(target)} {shlex.quote(source)}\n")
    logger.info(source + " moved to " + target)


def check_undo_log_file_header(args):
    if not os.path.exists(args.undo_log_file):
        with open(args.undo_log_file, "w") as log_file:
            wrapper = textwrap.TextWrapper(
                initial_indent="# ", subsequent_indent="# "
            )
            log_file.write("#!/bin/sh\n")
            log_file.write(
                wrapper.fill(
                    "File generated by normfn "
                    "(see http://www.github.com/andrewferrier/normfn). This file is "
                    "utf-8 encoded)"
                )
                + "\n"
            )
            log_file.write("#\n")
            log_file.write(
                wrapper.fill(
                    "This file contains shell commands which can be run to invert (undo) the effects of "
                    "running normfn. They must be run in *reverse order*. You can achieve "
                    "this by running `tac "
                    + args.undo_log_file
                    + " | sh`. If you wish, you can edit "
                    "the file first to control which actions are undone."
                )
                + "\n"
            )
            log_file.write("#\n")
            log_file.write(
                wrapper.fill(
                    "(Specific note for MacOS: tac may not be installed. You can install gtac, the "
                    "equivalent command, using `brew install coreutils`. You will need Homebrew - "
                    "http://brew.sh/ - installed)"
                )
                + "\n"
            )
            log_file.write("\n")


def ask_yes_no(prompt: str):
    while True:
        print(prompt, end="", flush=True)
        try:
            key = readchar().lower()
        except KeyboardInterrupt:
            raise QuitException()
        print(str(key, "utf-8"))
        if key in [b"y", b"n", b"e"]:
            return key
        elif key == b"q":
            raise QuitException()


def readchar():
    if os.name == "nt":
        import msvcrt

        return msvcrt.getch()
    else:
        import termios
        import tty

        try:
            old_settings = termios.tcgetattr(sys.stdin)
            tty.setcbreak(sys.stdin.fileno())
            try:
                return os.read(sys.stdin.fileno(), 1)
            finally:
                termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
        except termios.error:
            return os.read(sys.stdin.fileno(), 1)


def insensitiveize(string):
    return "".join(
        map(lambda char: ("[" + char.lower() + char.upper() + "]"), string)
    )


class FatalException(Exception):
    def __init__(self, value):
        Exception.__init__(self, value)
        self.value = value

    def __str__(self):
        return repr(self.value)


class QuitException(Exception):
    pass


if __name__ == "__main__":
    logger_setup = logging.getLogger("normfn")
    logger_setup.propagate = False
    logger_setup.setLevel(logging.DEBUG)

    sysErrHandler = logging.StreamHandler(stream=sys.stderr)
    sysErrHandler.setLevel(logging.WARNING)
    sysErrFormatter = logging.Formatter("%(levelname)s: %(message)s")
    sysErrHandler.setFormatter(sysErrFormatter)
    logger_setup.addHandler(sysErrHandler)

    try:
        main(sys.argv, sysErrHandler)
    except FatalException as error:
        logger_setup.error(error.value)
        sys.exit(2)
    except:
        traceback.print_exc()
        sys.exit(3)
